
CreepSpawner pre_alpha rev0 (09/08/2018)

Objectives:
> 0) If there are no harvesters, spawn biggest harvester we can afford
> 1) If there is at least as many as the minimum of any given role of creep, spawn a new instance of
   whichever role's current count is closest to its minimum (as a percentage of population)
   (we value harvesters more when their population is low)
   An example to consider:
     // minimum harvester population to maintain
     let minHarvester = 3;
     // A zero result means we have the minimum number of harvesters required.
     // The result of this will be used along with current population and minimum count to rank
     // all roles in order of most important to spawn next.
     let distanceFromMinimum = livingHarvesters - minHarvesters;
     let harvesterRank = 0;
     if (minHarvesters !== 0) {
        harvesterRank = role.priority - (distanceFromMinimum * livingHarvesters / minHarvesters)
     }
     // Highest priority wins!
> 2) Size of creep matters. We need to think of a way to determine the optimal creep body to build
   given available energy and priority of creep spawning.
> ?) Find some threshold of priority that will determine if we even want to spawn a creep.
   (perhaps do something like build role.warrior when no logistics screeps are needed.


test for new simplified spawn rule.
spawn whatever size you are currently able to.
in the section after all minimums have been satisfied, determine most needed
creep and spawn one of maximum current energy.

:::UPGRADE ROOM USING LINKS:::
find out how to use links. make creeps that grab energy from source and send
through link to control room (MINER). then make creeps that sit next to link and
move energy from link to control (TECHNICIAN). These roles must be seen as specialisations
of the upgrader role

Part of this will involve starting each new creep type from spawn. current thinking is to
make the miner find all Link objects and go to the one closest to an energy source.
(maybe make a named one or something specific to the object to ensure it is the one
that links to the control room thingy)

Once target link is determined, collect energy and drop into link (send to other side
or whatever the mechanism is) then collect more. repeat forever.

The same goes for the technician creep. Approach the Link closest to the Control thingy.
If you have energy in your pocket, upgrade control. if not, take some from the link and upgrade. repeat.

strategy to recover if no miners exist (for technicians):
If no energy is present in the Link, start a counter. if no energy appears in the Link after the counter
has reached some maximum (and there are no miners), the technician immediately changes its
role to miner. it then determines the Link that is linked to the one currently posted
at and will approach it.

perhaps a similar strategy could be followed for miners to turn into technicians.
whatever happens here, a clear split will need to happen between upgrader functionality
and general population control.

tag harvester as miner.
tag upgrader as miner and upgrader as technician.


make military.

> Create initialization process. During init for room, determine location and utility of
sources on first tick. how many creeps can use simultaneously? store results in memory. if
memory populated, don't re-init.

Example:
    if (memory.roomCache[roomName].initialized === true) {
        wait until 200 energy is available.
        Build a [MOVE, MOVE, MOVE, MOVE] creep.
        this is our pathfinder. he is the pioneer of the colony.
        lay down all the construction sites for the roads from sources
        layout rough energy array shape.
        determine locations for towers, links and mark with flags at each location.
        spawn builder, upgrader, harvester, repairer (all [WORK, MOVE, CARRY]) in that order.

        once these 4 creeps are built, pathfinder suicides.
        memory.roomCache[roomName].initialized = true;

    }



TOWERS:
Prioritize tower output. use them as repairer. defender. creep fixy?




